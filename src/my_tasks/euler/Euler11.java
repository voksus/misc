package my_tasks.euler;

/**
 * RUS:
 * В таблице 20×20 (внизу) четыре числа на одной диагонали выделены скобками.
 * 08  02  22  97  38  15  00  40  00  75  04  05  07  78  52  12  50  77  91  08
 * 49  49  99  40  17  81  18  57  60  87  17  40  98  43  69  48  04  56  62  00
 * 81  49  31  73  55  79  14  29  93  71  40  67  53  88  30  03  49  13  36  65
 * 52  70  95  23  04  60  11  42  69  24  68  56  01  32  56  71  37  02  36  91
 * 22  31  16  71  51  67  63  89  41  92  36  54  22  40  40  28  66  33  13  80
 * 24  47  32  60  99  03  45  02  44  75  33  53  78  36  84  20  35  17  12  50
 * 32  98  81  28  64  23  67  10 [26] 38  40  67  59  54  70  66  18  38  64  70
 * 67  26  20  68  02  62  12  20  95 [63] 94  39  63  08  40  91  66  49  94  21
 * 24  55  58  05  66  73  99  26  97  17 [78] 78  96  83  14  88  34  89  63  72
 * 21  36  23  09  75  00  76  44  20  45  35 [14] 00  61  33  97  34  31  33  95
 * 78  17  53  28  22  75  31  67  15  94  03  80  04  62  16  14  09  53  56  92
 * 16  39  05  42  96  35  31  47  55  58  88  24  00  17  54  24  36  29  85  57
 * 86  56  00  48  35  71  89  07  05  44  44  37  44  60  21  58  51  54  17  58
 * 19  80  81  68  05  94  47  69  28  73  92  13  86  52  17  77  04  89  55  40
 * 04  52  08  83  97  35  99  16  07  97  57  32  16  26  26  79  33  27  98  66
 * 88  36  68  87  57  62  20  72  03  46  33  67  46  55  12  32  63  93  53  69
 * 04  42  16  73  38  25  39  11  24  94  72  18  08  46  29  32  40  62  76  36
 * 20  69  36  41  72  30  23  88  34  62  99  69  82  67  59  85  74  04  36  16
 * 20  73  35  29  78  31  90  01  74  31  49  71  48  86  81  16  23  57  05  54
 * 01  70  54  71  83  51  54  69  16  92  33  48  61  43  52  01  89  19  67  48
 * Произведение этих чисел 26 × 63 × 78 × 14 = 1788696.
 * Каково наибольшее произведение четырех подряд идущих чисел
 * в таблице 20×20, расположенных в любом направлении (вверх,
 * вниз, вправо, влево или по диагонали)?
 * ------------------------------------------------------------------
 *
 * ENG:
 * In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
 * ...
 * ...
 * The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
 * What is the greatest product of four adjacent numbers
 * in the same direction (up, down, left, right, or diagonally)
 * in the 20×20 grid?
 *
 * @author Volodymyr Burtsev at 14.03.2019 23:12
 */
public class Euler11 {

    public static void main(String[] args) {
        int product = 0, biggest = 0;
        int x0=0,y0=0, x1=0,y1=0, x2=0,y2=0, x3=0,y3=0;
        int[][] grid = getNumbers();

        // step 1 : line of numbers on 'x'
        for (int x = 0; x < 17; x++) {
            for (int y = 0; y < 20; y++) {
                product = grid[y][x] * grid[y][x + 1] * grid[y][x + 2] * grid[y][x + 3];
                if (product > biggest) {
                    biggest = product;
                    x0=x; x1=x+1; x2=x+2; x3=x+3;
                    y0=y1=y2=y3=y;
                }
            }
        }

        // step 2 : line of numbers on 'y'
        for (int x = 0; x < 20; x++) {
            for (int y = 0; y < 17; y++) {
                product = grid[y][x] * grid[y + 1][x] * grid[y + 2][x] * grid[y + 3][x];
                if (product > biggest) {
                    biggest = product;
                    x0=x1=x2=x3=x;
                    y0=y; y1=y+1; y2=y+2; y3=y+3;
                }
            }
        }

        // step 3 : daigonal '/'
        for (int x = 0; x < 17; x++) {
            for (int y = 0; y < 17; y++) {
                product = grid[y][x + 3] * grid[y + 1][x + 2] * grid[y + 2][x + 1] * grid[y + 3][x];
                if (product > biggest) {
                    biggest = product;
                    x0=x+3; x1=x+2; x2=x+1; x3=x;
                    y0=y; y1=y+1; y2=y+2; y3=y+3;
                }
            }
        }

        // step 4 : daigonal '\'
        for (int x = 0; x < 17; x++) {
            for (int y = 0; y < 17; y++) {
                product = grid[y][x] * grid[y + 1][x + 1] * grid[y + 2][x + 2] * grid[y + 3][x + 3];
                if (product > biggest) {
                    biggest = product;
                    x0=x; x1=x+1; x2=x+2; x3=x+3;
                    y0=y; y1=y+1; y2=y+2; y3=y+3;
                }
            }
        }

        System.out.println("[" + x0 + "," + y0 + "] > " + grid[y0][x0]);
        System.out.println("[" + x1 + "," + y1 + "] > " + grid[y1][x1]);
        System.out.println("[" + x2 + "," + y2 + "] > " + grid[y2][x2]);
        System.out.println("[" + x3 + "," + y3 + "] > " + grid[y3][x3]);
        System.out.print("The biggest product: ");
        System.out.printf("%,d%n", biggest);
    }

    private static int[][] getNumbers() {
        return new int[][] {
                //0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19
                { 8,  2, 22, 97, 38, 15,  0, 40,  0, 75,  4,  5,  7, 78, 52, 12, 50, 77, 91,  8}, // 0
                {49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48,  4, 56, 62,  0}, // 1
                {81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30,  3, 49, 13, 36, 65}, // 2
                {52, 70, 95, 23,  4, 60, 11, 42, 69, 24, 68, 56,  1, 32, 56, 71, 37,  2, 36, 91}, // 3
                {22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80}, // 4
                {24, 47, 32, 60, 99,  3, 45,  2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50}, // 5
                {32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70}, // 6
                {67, 26, 20, 68,  2, 62, 12, 20, 95, 63, 94, 39, 63,  8, 40, 91, 66, 49, 94, 21}, // 7
                {24, 55, 58,  5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72}, // 8
                {21, 36, 23,  9, 75,  0, 76, 44, 20, 45, 35, 14,  0, 61, 33, 97, 34, 31, 33, 95}, // 9
                {78, 17, 53, 28, 22, 75, 31, 67, 15, 94,  3, 80,  4, 62, 16, 14,  9, 53, 56, 92}, // 10
                {16, 39,  5, 42, 96, 35, 31, 47, 55, 58, 88, 24,  0, 17, 54, 24, 36, 29, 85, 57}, // 11
                {86, 56,  0, 48, 35, 71, 89,  7,  5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58}, // 12
                {19, 80, 81, 68,  5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77,  4, 89, 55, 40}, // 13
                { 4, 52,  8, 83, 97, 35, 99, 16,  7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66}, // 14
                {88, 36, 68, 87, 57, 62, 20, 72,  3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69}, // 15
                { 4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18,  8, 46, 29, 32, 40, 62, 76, 36}, // 16
                {20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74,  4, 36, 16}, // 17
                {20, 73, 35, 29, 78, 31, 90,  1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57,  5, 54}, // 18
                { 1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52,  1, 89, 19, 67, 48}  // 19
        };
    }

}