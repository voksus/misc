package my_tasks.euler;

/**
 * RUS:
 * Наибольшее произведение четырех последовательных цифр
 * в нижеприведенном 1000-значном числе равно 9 × 9 × 8 × 9 = 5832.
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 * Найдите наибольшее произведение тринадцати последовательных цифр в данном числе.
 * ------------------------------------------------------------------
 *
 * ENG:
 * The four adjacent digits in the 1000-digit number
 * that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 * ...
 * ...
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
 * What is the value of this product?
 *
 * @author Volodymyr Burtsev at 14.03.2019 21:19
 */
public class Euler8 {

    private static final String num1000 = getNum1000();

    public static void main(String[] args) {
        int adjacentCount = 13;
        int curStart = 0;
        long biggest = 0;
        int positionFound = 0;
        String sub = "";

        while (curStart < num1000.length() - adjacentCount + 1) {
            // get the part of the number
            sub = num1000.substring(curStart++, curStart + adjacentCount - 1);

            // ignore calcelation if number's part contains '0'
            if (sub.contains("0")) continue;
            long product = 1;

            // calculating the product from adjacent n-digits
            for (int i = 0; i < sub.length(); i++) product *= (sub.charAt(i) - 48);

            // find the greater product
            if (product > biggest) {
                biggest = product;
                positionFound = curStart;
            }
        }

        // Show the result
        System.out.print(num1000.substring(positionFound - 1, positionFound));
        for (int i = positionFound; i < positionFound + adjacentCount - 1; i++) {
            System.out.print(" × " + num1000.substring(i, i + 1));
        }
        System.out.println(" = " + biggest);
    }

    private static String getNum1000() {
        return "" +
                "73167176531330624919225119674426574742355349194934" +
                "96983520312774506326239578318016984801869478851843" +
                "85861560789112949495459501737958331952853208805511" +
                "12540698747158523863050715693290963295227443043557" +
                "66896648950445244523161731856403098711121722383113" +
                "62229893423380308135336276614282806444486645238749" +
                "30358907296290491560440772390713810515859307960866" +
                "70172427121883998797908792274921901699720888093776" +
                "65727333001053367881220235421809751254540594752243" +
                "52584907711670556013604839586446706324415722155397" +
                "53697817977846174064955149290862569321978468622482" +
                "83972241375657056057490261407972968652414535100474" +
                "82166370484403199890008895243450658541227588666881" +
                "16427171479924442928230863465674813919123162824586" +
                "17866458359124566529476545682848912883142607690042" +
                "24219022671055626321111109370544217506941658960408" +
                "07198403850962455444362981230987879927244284909188" +
                "84580156166097919133875499200524063689912560717606" +
                "05886116467109405077541002256983155200055935729725" +
                "71636269561882670428252483600823257530420752963450";
    }

}